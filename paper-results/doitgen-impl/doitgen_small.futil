import "primitives/binary_operators.futil";
import "primitives/compile.futil";
import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/pipelined.futil";
component kernel_doitgen<"toplevel"=1,>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_9 = std_slice(6, 5);
    std_slice_8 = std_slice(6, 5);
    std_slice_7 = std_slice(6, 5);
    std_slice_6 = std_slice(6, 5);
    std_slice_5 = std_slice(6, 5);
    std_slice_4 = std_slice(6, 5);
    std_slice_3 = std_slice(6, 5);
    std_slice_2 = std_slice(6, 5);
    std_slice_1 = std_slice(6, 5);
    std_slice_0 = std_slice(6, 5);
    guard_reg_7_reg = std_reg(1);
    guard_reg_6_reg = std_reg(1);
    std_lt_1 = std_lt(5);
    guard_reg_5_reg = std_reg(1);
    guard_reg_4_reg = std_reg(1);
    guard_reg_3_reg = std_reg(1);
    guard_reg_2_reg = std_reg(1);
    guard_reg_1_reg = std_reg(1);
    guard_reg_0_reg = std_reg(1);
    std_lt_0 = std_lt(6);
    loop_2_stage_0_register_1_reg = std_reg(6);
    loop_4_arg0_reg = std_reg(6);
    std_slt_7 = std_slt(6);
    std_add_7 = std_add(6);
    loop_3_arg0_reg = std_reg(6);
    std_slt_6 = std_slt(6);
    std_add_6 = std_add(6);
    std_add_5 = std_add(5);
    idx_1_reg = std_reg(5);
    loop_2_arg0_reg = std_reg(6);
    std_add_4 = std_add(6);
    std_slt_5 = std_slt(6);
    loop_1_arg0_reg = std_reg(6);
    std_slt_4 = std_slt(6);
    std_add_3 = std_add(6);
    std_add_2 = std_add(6);
    idx_0_reg = std_reg(6);
    loop_0_arg1_reg = std_reg(32);
    loop_0_arg0_reg = std_reg(6);
    std_add_1 = std_add(32);
    pipelined_mult_0 = pipelined_mult(32);
    std_add_0 = std_add(6);
    std_slt_3 = std_slt(6);
    std_slt_2 = std_slt(6);
    std_slt_1 = std_slt(6);
    std_slt_0 = std_slt(6);
    mem_0 = seq_mem_d1(32, 30, 5);
    loop_4_cond_reg = std_reg(1);
    loop_3_cond_reg = std_reg(1);
    loop_1_cond_reg = std_reg(1);
    @external(1) ext_mem_0 = seq_mem_d3(32, 25, 20, 30, 5, 5, 5);
    @external(1) ext_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    ext_mem_1.write_en = 1'd0;
    static<1> group cond_init_0 {
      loop_1_cond_reg.in = std_slt_2.out;
      loop_1_cond_reg.write_en = 1'd1;
      std_slt_2.left = 6'd0;
      std_slt_2.right = 6'd30;
    }
    static<1> group cond_0 {
      loop_1_cond_reg.in = std_slt_4.out;
      loop_1_cond_reg.write_en = 1'd1;
      std_slt_4.left = std_add_3.out;
      std_add_3.left = loop_1_arg0_reg.out;
      std_add_3.right = 6'd1;
      std_slt_4.right = 6'd30;
    }
    static<1> group cond_init_1 {
      loop_3_cond_reg.in = std_slt_1.out;
      loop_3_cond_reg.write_en = 1'd1;
      std_slt_1.left = 6'd0;
      std_slt_1.right = 6'd20;
    }
    static<1> group cond_1 {
      loop_3_cond_reg.in = std_slt_6.out;
      loop_3_cond_reg.write_en = 1'd1;
      std_slt_6.left = std_add_6.out;
      std_add_6.left = loop_3_arg0_reg.out;
      std_add_6.right = 6'd1;
      std_slt_6.right = 6'd20;
    }
    static<1> group cond_init_2 {
      loop_4_cond_reg.in = std_slt_0.out;
      loop_4_cond_reg.write_en = 1'd1;
      std_slt_0.left = 6'd0;
      std_slt_0.right = 6'd25;
    }
    static<1> group cond_2 {
      loop_4_cond_reg.in = std_slt_7.out;
      loop_4_cond_reg.write_en = 1'd1;
      std_slt_7.left = std_add_7.out;
      std_add_7.left = loop_4_arg0_reg.out;
      std_add_7.right = 6'd1;
      std_slt_7.right = 6'd25;
    }
    static<1> group load_0 {
      std_slice_9.in = loop_4_arg0_reg.out;
      std_slice_8.in = loop_3_arg0_reg.out;
      std_slice_7.in = loop_0_arg0_reg.out;
      ext_mem_0.addr0 = std_slice_9.out;
      ext_mem_0.addr1 = std_slice_8.out;
      ext_mem_0.addr2 = std_slice_7.out;
      ext_mem_0.content_en = 1'd1;
    }
    static<1> group load_1 {
      std_slice_6.in = loop_0_arg0_reg.out;
      std_slice_5.in = loop_1_arg0_reg.out;
      ext_mem_1.addr0 = std_slice_6.out;
      ext_mem_1.addr1 = std_slice_5.out;
      ext_mem_1.content_en = 1'd1;
    }
    static<1> group muli_0 {
      pipelined_mult_0.left = ext_mem_0.read_data;
      pipelined_mult_0.right = ext_mem_1.read_data;
    }
    static<1> group assign_loop_0_init_0 {
      loop_0_arg0_reg.in = 6'd0;
      loop_0_arg0_reg.write_en = 1'd1;
    }
    static<1> group assign_loop_0_init_1 {
      loop_0_arg1_reg.in = 32'd0;
      loop_0_arg1_reg.write_en = 1'd1;
    }
    static<1> group incr_0 {
      std_add_2.left = idx_0_reg.out;
      std_add_2.right = 6'd1;
      idx_0_reg.in = std_add_2.out;
      idx_0_reg.write_en = 1'd1;
      std_lt_0.left = std_add_2.out;
      std_lt_0.right = 6'd30;
      guard_reg_0_reg.in = std_lt_0.out;
      guard_reg_0_reg.write_en = 1'd1;
      guard_reg_1_reg.in = guard_reg_0_reg.out;
      guard_reg_1_reg.write_en = 1'd1;
      guard_reg_2_reg.in = guard_reg_1_reg.out;
      guard_reg_2_reg.write_en = 1'd1;
      guard_reg_3_reg.in = guard_reg_2_reg.out;
      guard_reg_3_reg.write_en = 1'd1;
      guard_reg_4_reg.in = guard_reg_3_reg.out;
      guard_reg_4_reg.write_en = 1'd1;
      guard_reg_5_reg.in = guard_reg_4_reg.out;
      guard_reg_5_reg.write_en = 1'd1;
    }
    static<1> group incr_init_0 {
      idx_0_reg.in = 6'd0;
      idx_0_reg.write_en = 1'd1;
    }
    static<1> group store_0 {
      std_slice_4.in = loop_1_arg0_reg.out;
      mem_0.addr0 = std_slice_4.out;
      mem_0.write_data = loop_0_arg1_reg.out;
      mem_0.write_en = 1'd1;
      mem_0.content_en = 1'd1;
    }
    static<1> group assign_loop_1_init_0 {
      loop_1_arg0_reg.in = 6'd0;
      loop_1_arg0_reg.write_en = 1'd1;
    }
    static<1> group load_2 {
      std_slice_3.in = loop_2_arg0_reg.out;
      mem_0.addr0 = std_slice_3.out;
      mem_0.content_en = 1'd1;
    }
    static<1> group store_1 {
      std_slice_2.in = loop_4_arg0_reg.out;
      std_slice_1.in = loop_3_arg0_reg.out;
      std_slice_0.in = loop_2_stage_0_register_1_reg.out;
      ext_mem_0.addr0 = std_slice_2.out;
      ext_mem_0.addr1 = std_slice_1.out;
      ext_mem_0.addr2 = std_slice_0.out;
      ext_mem_0.write_data = mem_0.read_data;
      ext_mem_0.write_en = 1'd1;
      ext_mem_0.content_en = 1'd1;
    }
    static<1> group assign_loop_2_init_0 {
      loop_2_arg0_reg.in = 6'd0;
      loop_2_arg0_reg.write_en = 1'd1;
    }
    static<1> group incr_1 {
      std_add_5.left = idx_1_reg.out;
      std_add_5.right = 5'd1;
      idx_1_reg.in = std_add_5.out;
      idx_1_reg.write_en = 1'd1;
      std_lt_1.left = std_add_5.out;
      std_lt_1.right = 5'd30;
      guard_reg_6_reg.in = std_lt_1.out;
      guard_reg_6_reg.write_en = 1'd1;
      guard_reg_7_reg.in = guard_reg_6_reg.out;
      guard_reg_7_reg.write_en = 1'd1;
    }
    static<1> group incr_init_1 {
      idx_1_reg.in = 5'd0;
      idx_1_reg.write_en = 1'd1;
    }
    static<1> group assign_loop_3_init_0 {
      loop_3_arg0_reg.in = 6'd0;
      loop_3_arg0_reg.write_en = 1'd1;
    }
    static<1> group assign_loop_4_init_0 {
      loop_4_arg0_reg.in = 6'd0;
      loop_4_arg0_reg.write_en = 1'd1;
    }
    static<1> group guard_init_0 {
      guard_reg_0_reg.in = 1'd1;
      guard_reg_0_reg.write_en = 1'd1;
    }
    static<1> group phase_reg_2 {
      loop_0_arg0_reg.in = std_add_0.out;
      loop_0_arg0_reg.write_en = 1'd1;
      std_add_0.left = loop_0_arg0_reg.out;
      std_add_0.right = 6'd1;
    }
    static<1> group guard_init_1 {
      guard_reg_1_reg.in = 1'd0;
      guard_reg_1_reg.write_en = 1'd1;
    }
    static<1> group guard_init_2 {
      guard_reg_5_reg.in = 1'd0;
      guard_reg_5_reg.write_en = 1'd1;
    }
    static<1> group phase_reg_4 {
      loop_0_arg1_reg.in = std_add_1.out;
      loop_0_arg1_reg.write_en = 1'd1;
      std_add_1.left = loop_0_arg1_reg.out;
      std_add_1.right = pipelined_mult_0.out;
    }
    static<1> group phase_reg_5 {
      loop_1_arg0_reg.in = std_add_3.out;
      loop_1_arg0_reg.write_en = 1'd1;
      std_add_3.left = loop_1_arg0_reg.out;
      std_add_3.right = 6'd1;
    }
    static<1> group guard_init_3 {
      guard_reg_6_reg.in = 1'd1;
      guard_reg_6_reg.write_en = 1'd1;
    }
    static<1> group phase_reg_8 {
      loop_2_stage_0_register_1_reg.in = loop_2_arg0_reg.out;
      loop_2_stage_0_register_1_reg.write_en = 1'd1;
    }
    static<1> group phase_reg_9 {
      loop_2_arg0_reg.in = std_add_4.out;
      loop_2_arg0_reg.write_en = 1'd1;
      std_add_4.left = loop_2_arg0_reg.out;
      std_add_4.right = 6'd1;
    }
    static<1> group guard_init_4 {
      guard_reg_7_reg.in = 1'd0;
      guard_reg_7_reg.write_en = 1'd1;
    }
    static<1> group phase_reg_10 {
      loop_3_arg0_reg.in = std_add_6.out;
      loop_3_arg0_reg.write_en = 1'd1;
      std_add_6.left = loop_3_arg0_reg.out;
      std_add_6.right = 6'd1;
    }
    static<1> group phase_reg_11 {
      loop_4_arg0_reg.in = std_add_7.out;
      loop_4_arg0_reg.write_en = 1'd1;
      std_add_7.left = loop_4_arg0_reg.out;
      std_add_7.right = 6'd1;
    }
  }
  control {
    seq {
      par {
        seq {
          static seq {
            static par {
              cond_init_2;
              assign_loop_4_init_0;
            }
          }
          while loop_4_cond_reg.out {
            seq {
              par {
                seq {
                  static seq {
                    static par {
                      cond_init_1;
                      assign_loop_3_init_0;
                    }
                  }
                  while loop_3_cond_reg.out {
                    seq {
                      par {
                        seq {
                          static seq {
                            static par {
                              cond_init_0;
                              assign_loop_1_init_0;
                            }
                          }
                          while loop_1_cond_reg.out {
                            seq {
                              par {
                                seq {
                                  static seq {
                                    static par {
                                      assign_loop_0_init_0;
                                      assign_loop_0_init_1;
                                      incr_init_0;
                                      guard_init_0;
                                      guard_init_1;
                                      guard_init_2;
                                    }
                                  }
                                  static repeat 35 {
                                    static par {
                                      incr_0;
                                      static if guard_reg_0_reg.out {
                                        static par {
                                          load_0;
                                          load_1;
                                          phase_reg_2;
                                        }
                                      }
                                      static if guard_reg_1_reg.out {
                                        static par {
                                          muli_0;
                                        }
                                      }
                                      static if guard_reg_5_reg.out {
                                        static par {
                                          phase_reg_4;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              par {
                                cond_0;
                                store_0;
                                phase_reg_5;
                              }
                            }
                          }
                        }
                      }
                      par {
                        seq {
                          static seq {
                            static par {
                              assign_loop_2_init_0;
                              incr_init_1;
                              guard_init_3;
                              guard_init_4;
                            }
                          }
                          static repeat 31 {
                            static par {
                              incr_1;
                              static if guard_reg_6_reg.out {
                                static par {
                                  load_2;
                                  phase_reg_8;
                                  phase_reg_9;
                                }
                              }
                              static if guard_reg_7_reg.out {
                                static par {
                                  store_1;
                                }
                              }
                            }
                          }
                        }
                      }
                      par {
                        cond_1;
                        phase_reg_10;
                      }
                    }
                  }
                }
              }
              par {
                cond_2;
                phase_reg_11;
              }
            }
          }
        }
      }
    }
  }
}
