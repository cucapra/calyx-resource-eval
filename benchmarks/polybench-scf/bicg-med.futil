import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/memories.futil";
component main<"toplevel"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_9 = std_slice(32, 9);
    std_slice_8 = std_slice(32, 9);
    std_slice_7 = std_slice(32, 9);
    std_slice_6 = std_slice(32, 9);
    std_slice_5 = std_slice(32, 9);
    std_slice_4 = std_slice(32, 9);
    std_slice_3 = std_slice(32, 9);
    std_slice_2 = std_slice(32, 9);
    std_slice_1 = std_slice(32, 9);
    std_slice_0 = std_slice(32, 9);
    std_add_4 = std_add(32);
    std_add_3 = std_add(32);
    std_add_2 = std_add(32);
    muli_1_reg = std_reg(32);
    std_mult_pipe_1 = std_mult_pipe(32);
    load_1_reg = std_reg(32);
    std_add_1 = std_add(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    load_0_reg = std_reg(32);
    std_add_0 = std_add(32);
    @external(1) mem_4 = seq_mem_d2(32, 410, 390, 9, 9);
    @external(1) mem_3 = seq_mem_d1(32, 390, 9);
    @external(1) mem_2 = seq_mem_d1(32, 410, 9);
    @external(1) mem_1 = seq_mem_d1(32, 390, 9);
    @external(1) mem_0 = seq_mem_d1(32, 410, 9);
    for_2_induction_var_reg = std_reg(32);
    for_1_induction_var_reg = std_reg(32);
    for_0_induction_var_reg = std_reg(32);
  }
  wires {
    group init_for_0_induction_var {
      for_0_induction_var_reg.in = 32'd0;
      for_0_induction_var_reg.write_en = 1'd1;
      init_for_0_induction_var[done] = for_0_induction_var_reg.done;
    }
    group init_for_1_induction_var {
      for_1_induction_var_reg.in = 32'd0;
      for_1_induction_var_reg.write_en = 1'd1;
      init_for_1_induction_var[done] = for_1_induction_var_reg.done;
    }
    group init_for_2_induction_var {
      for_2_induction_var_reg.in = 32'd0;
      for_2_induction_var_reg.write_en = 1'd1;
      init_for_2_induction_var[done] = for_2_induction_var_reg.done;
    }
    group bb0_0 {
      std_slice_9.in = for_0_induction_var_reg.out;
      mem_3.addr0 = std_slice_9.out;
      mem_3.write_data = 32'd0;
      mem_3.write_en = 1'd1;
      bb0_0[done] = mem_3.write_done;
    }
    group incr_for_0_induction_var {
      std_add_0.left = for_0_induction_var_reg.out;
      std_add_0.right = 32'd1;
      for_0_induction_var_reg.in = std_add_0.out;
      for_0_induction_var_reg.write_en = 1'd1;
      incr_for_0_induction_var[done] = for_0_induction_var_reg.done;
    }
    group bb0_1 {
      std_slice_8.in = for_2_induction_var_reg.out;
      mem_2.addr0 = std_slice_8.out;
      mem_2.write_data = 32'd0;
      mem_2.write_en = 1'd1;
      bb0_1[done] = mem_2.write_done;
    }
    group bb0_2 {
      std_slice_7.in = for_2_induction_var_reg.out;
      mem_0.addr0 = std_slice_7.out;
      mem_0.read_en = 1'd1;
      bb0_2[done] = mem_0.read_done;
    }
    group bb0_3 {
      std_slice_6.in = for_1_induction_var_reg.out;
      mem_3.addr0 = std_slice_6.out;
      mem_3.read_en = 1'd1;
      load_0_reg.in = mem_3.read_data;
      load_0_reg.write_en = mem_3.read_done;
      bb0_3[done] = load_0_reg.done;
    }
    group bb0_4 {
      std_slice_5.in = for_2_induction_var_reg.out;
      std_slice_4.in = for_1_induction_var_reg.out;
      mem_4.addr0 = std_slice_5.out;
      mem_4.addr1 = std_slice_4.out;
      mem_4.read_en = 1'd1;
      bb0_4[done] = mem_4.read_done;
    }
    group bb0_5 {
      std_mult_pipe_0.left = mem_0.read_data;
      std_mult_pipe_0.right = mem_4.read_data;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_5[done] = muli_0_reg.done;
    }
    group bb0_7 {
      std_slice_3.in = for_1_induction_var_reg.out;
      mem_3.addr0 = std_slice_3.out;
      mem_3.write_data = std_add_1.out;
      mem_3.write_en = 1'd1;
      std_add_1.left = load_0_reg.out;
      std_add_1.right = std_mult_pipe_0.out;
      bb0_7[done] = mem_3.write_done;
    }
    group bb0_8 {
      std_slice_2.in = for_2_induction_var_reg.out;
      mem_2.addr0 = std_slice_2.out;
      mem_2.read_en = 1'd1;
      load_1_reg.in = mem_2.read_data;
      load_1_reg.write_en = mem_2.read_done;
      bb0_8[done] = load_1_reg.done;
    }
    group bb0_9 {
      std_slice_1.in = for_1_induction_var_reg.out;
      mem_1.addr0 = std_slice_1.out;
      mem_1.read_en = 1'd1;
      bb0_9[done] = mem_1.read_done;
    }
    group bb0_10 {
      std_mult_pipe_1.left = mem_4.read_data;
      std_mult_pipe_1.right = mem_1.read_data;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_10[done] = muli_1_reg.done;
    }
    group bb0_12 {
      std_slice_0.in = for_2_induction_var_reg.out;
      mem_2.addr0 = std_slice_0.out;
      mem_2.write_data = std_add_2.out;
      mem_2.write_en = 1'd1;
      std_add_2.left = load_1_reg.out;
      std_add_2.right = std_mult_pipe_1.out;
      bb0_12[done] = mem_2.write_done;
    }
    group incr_for_1_induction_var {
      std_add_3.left = for_1_induction_var_reg.out;
      std_add_3.right = 32'd1;
      for_1_induction_var_reg.in = std_add_3.out;
      for_1_induction_var_reg.write_en = 1'd1;
      incr_for_1_induction_var[done] = for_1_induction_var_reg.done;
    }
    group incr_for_2_induction_var {
      std_add_4.left = for_2_induction_var_reg.out;
      std_add_4.right = 32'd1;
      for_2_induction_var_reg.in = std_add_4.out;
      for_2_induction_var_reg.write_en = 1'd1;
      incr_for_2_induction_var[done] = for_2_induction_var_reg.done;
    }
  }
  control {
    seq {
      init_for_0_induction_var;
      repeat 390 {
        seq {
          bb0_0;
          incr_for_0_induction_var;
        }
      }
      init_for_2_induction_var;
      repeat 410 {
        seq {
          bb0_1;
          bb0_2;
          init_for_1_induction_var;
          repeat 390 {
            seq {
              bb0_3;
              bb0_4;
              bb0_5;
              bb0_7;
              bb0_8;
              bb0_9;
              bb0_10;
              bb0_12;
              incr_for_1_induction_var;
            }
          }
          incr_for_2_induction_var;
        }
      }
    }
  }
}
