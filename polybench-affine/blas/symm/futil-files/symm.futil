import "primitives/core.futil";
import "primitives/binary_operators.futil";
component main<"toplevel"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_17 = std_slice(32, 5);
    std_slice_16 = std_slice(32, 5);
    std_slice_15 = std_slice(32, 5);
    std_slice_14 = std_slice(32, 5);
    std_slice_13 = std_slice(32, 5);
    std_slice_12 = std_slice(32, 5);
    std_slice_11 = std_slice(32, 5);
    std_slice_10 = std_slice(32, 5);
    std_slice_9 = std_slice(32, 5);
    std_slice_8 = std_slice(32, 5);
    std_slice_7 = std_slice(32, 5);
    std_slice_6 = std_slice(32, 5);
    std_slice_5 = std_slice(32, 5);
    std_slice_4 = std_slice(32, 5);
    std_slice_3 = std_slice(32, 5);
    std_slice_2 = std_slice(32, 5);
    std_slice_1 = std_slice(32, 5);
    std_slice_0 = std_slice(32, 5);
    std_add_6 = std_add(32);
    muli_5_reg = std_reg(32);
    std_mult_pipe_5 = std_mult_pipe(32);
    load_8_reg = std_reg(32);
    std_add_5 = std_add(32);
    muli_4_reg = std_reg(32);
    std_mult_pipe_4 = std_mult_pipe(32);
    muli_3_reg = std_reg(32);
    std_mult_pipe_3 = std_mult_pipe(32);
    load_7_reg = std_reg(32);
    load_6_reg = std_reg(32);
    std_add_4 = std_add(32);
    load_5_reg = std_reg(32);
    muli_2_reg = std_reg(32);
    std_mult_pipe_2 = std_mult_pipe(32);
    load_4_reg = std_reg(32);
    std_add_3 = std_add(32);
    load_3_reg = std_reg(32);
    muli_1_reg = std_reg(32);
    std_mult_pipe_1 = std_mult_pipe(32);
    load_2_reg = std_reg(32);
    std_add_2 = std_add(32);
    std_slt_2 = std_slt(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    load_1_reg = std_reg(32);
    std_add_1 = std_add(32);
    std_slt_1 = std_slt(32);
    load_0_reg = std_reg(32);
    std_add_0 = std_add(32);
    std_slt_0 = std_slt(32);
    @external(1) mem_3 = std_mem_d1(32, 1, 1);
    @external(1) mem_2 = std_mem_d2(32, 20, 20, 5, 5);
    @external(1) mem_1 = std_mem_d2(32, 20, 30, 5, 5);
    @external(1) mem_0 = std_mem_d2(32, 20, 30, 5, 5);
    while_2_arg0_reg = std_reg(32);
    while_1_arg0_reg = std_reg(32);
    while_0_arg0_reg = std_reg(32);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_0 {
      mem_3.addr0 = 1'd0;
      mem_3.write_data = 32'd0;
      mem_3.write_en = 1'd1;
      bb0_0[done] = mem_3.done;
    }
    comb group bb0_1 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    group bb0_3 {
      std_slice_17.in = while_2_arg0_reg.out;
      std_slice_16.in = while_2_arg0_reg.out;
      mem_2.addr0 = std_slice_17.out;
      mem_2.addr1 = std_slice_16.out;
      load_0_reg.in = mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      bb0_3[done] = load_0_reg.done;
    }
    comb group bb0_4 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd30;
    }
    group bb0_6 {
      mem_3.addr0 = 1'd0;
      mem_3.write_data = 32'd0;
      mem_3.write_en = 1'd1;
      bb0_6[done] = mem_3.done;
    }
    group bb0_7 {
      std_slice_15.in = while_2_arg0_reg.out;
      std_slice_14.in = while_1_arg0_reg.out;
      mem_1.addr0 = std_slice_15.out;
      mem_1.addr1 = std_slice_14.out;
      load_1_reg.in = mem_1.read_data;
      load_1_reg.write_en = 1'd1;
      bb0_7[done] = load_1_reg.done;
    }
    group bb0_8 {
      std_mult_pipe_0.left = load_1_reg.out;
      std_mult_pipe_0.right = 32'd2;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_8[done] = muli_0_reg.done;
    }
    comb group bb0_9 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = while_2_arg0_reg.out;
    }
    group bb0_11 {
      std_slice_13.in = while_2_arg0_reg.out;
      std_slice_12.in = while_0_arg0_reg.out;
      mem_2.addr0 = std_slice_13.out;
      mem_2.addr1 = std_slice_12.out;
      load_2_reg.in = mem_2.read_data;
      load_2_reg.write_en = 1'd1;
      bb0_11[done] = load_2_reg.done;
    }
    group bb0_12 {
      std_mult_pipe_1.left = std_mult_pipe_0.out;
      std_mult_pipe_1.right = load_2_reg.out;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_12[done] = muli_1_reg.done;
    }
    group bb0_13 {
      std_slice_11.in = while_0_arg0_reg.out;
      std_slice_10.in = while_1_arg0_reg.out;
      mem_0.addr0 = std_slice_11.out;
      mem_0.addr1 = std_slice_10.out;
      load_3_reg.in = mem_0.read_data;
      load_3_reg.write_en = 1'd1;
      bb0_13[done] = load_3_reg.done;
    }
    group bb0_15 {
      std_slice_9.in = while_0_arg0_reg.out;
      std_slice_8.in = while_1_arg0_reg.out;
      mem_0.addr0 = std_slice_9.out;
      mem_0.addr1 = std_slice_8.out;
      mem_0.write_data = std_add_3.out;
      mem_0.write_en = 1'd1;
      std_add_3.left = load_3_reg.out;
      std_add_3.right = std_mult_pipe_1.out;
      bb0_15[done] = mem_0.done;
    }
    group bb0_16 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      mem_1.addr0 = std_slice_7.out;
      mem_1.addr1 = std_slice_6.out;
      load_4_reg.in = mem_1.read_data;
      load_4_reg.write_en = 1'd1;
      bb0_16[done] = load_4_reg.done;
    }
    group bb0_17 {
      std_mult_pipe_2.left = load_4_reg.out;
      std_mult_pipe_2.right = load_2_reg.out;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_17[done] = muli_2_reg.done;
    }
    group bb0_18 {
      mem_3.addr0 = 1'd0;
      load_5_reg.in = mem_3.read_data;
      load_5_reg.write_en = 1'd1;
      bb0_18[done] = load_5_reg.done;
    }
    group bb0_20 {
      mem_3.addr0 = 1'd0;
      mem_3.write_data = std_add_4.out;
      mem_3.write_en = 1'd1;
      std_add_4.left = load_5_reg.out;
      std_add_4.right = std_mult_pipe_2.out;
      bb0_20[done] = mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group bb0_21 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_1_arg0_reg.out;
      mem_0.addr0 = std_slice_5.out;
      mem_0.addr1 = std_slice_4.out;
      load_6_reg.in = mem_0.read_data;
      load_6_reg.write_en = 1'd1;
      bb0_21[done] = load_6_reg.done;
    }
    group bb0_22 {
      std_slice_3.in = while_2_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      mem_1.addr0 = std_slice_3.out;
      mem_1.addr1 = std_slice_2.out;
      load_7_reg.in = mem_1.read_data;
      load_7_reg.write_en = 1'd1;
      bb0_22[done] = load_7_reg.done;
    }
    group bb0_23 {
      std_mult_pipe_3.left = load_7_reg.out;
      std_mult_pipe_3.right = 32'd2;
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      bb0_23[done] = muli_3_reg.done;
    }
    group bb0_24 {
      std_mult_pipe_4.left = std_mult_pipe_3.out;
      std_mult_pipe_4.right = load_0_reg.out;
      muli_4_reg.in = std_mult_pipe_4.out;
      muli_4_reg.write_en = std_mult_pipe_4.done;
      std_mult_pipe_4.go = !std_mult_pipe_4.done ? 1'd1;
      bb0_24[done] = muli_4_reg.done;
    }
    group bb0_26 {
      mem_3.addr0 = 1'd0;
      load_8_reg.in = mem_3.read_data;
      load_8_reg.write_en = 1'd1;
      bb0_26[done] = load_8_reg.done;
    }
    group bb0_27 {
      std_mult_pipe_5.left = load_8_reg.out;
      std_mult_pipe_5.right = 32'd2;
      muli_5_reg.in = std_mult_pipe_5.out;
      muli_5_reg.write_en = std_mult_pipe_5.done;
      std_mult_pipe_5.go = !std_mult_pipe_5.done ? 1'd1;
      bb0_27[done] = muli_5_reg.done;
    }
    group bb0_29 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      mem_0.addr0 = std_slice_1.out;
      mem_0.addr1 = std_slice_0.out;
      mem_0.write_data = std_add_6.out;
      mem_0.write_en = 1'd1;
      std_add_6.left = std_add_5.out;
      std_add_5.left = load_6_reg.out;
      std_add_5.right = std_mult_pipe_4.out;
      std_add_6.right = std_mult_pipe_5.out;
      bb0_29[done] = mem_0.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
  }
  control {
    seq {
      seq {
        bb0_0;
        par {
          assign_while_2_init_0;
        }
        while std_slt_0.out with bb0_1 {
          seq {
            seq {
              bb0_3;
              par {
                assign_while_1_init_0;
              }
              while std_slt_1.out with bb0_4 {
                seq {
                  seq {
                    bb0_6;
                    bb0_7;
                    bb0_8;
                    par {
                      assign_while_0_init_0;
                    }
                    while std_slt_2.out with bb0_9 {
                      seq {
                        seq {
                          bb0_11;
                          bb0_12;
                          bb0_13;
                          bb0_15;
                          bb0_16;
                          bb0_17;
                          bb0_18;
                          bb0_20;
                        }
                        assign_while_0_latch;
                      }
                    }
                    bb0_21;
                    bb0_22;
                    bb0_23;
                    bb0_24;
                    bb0_26;
                    bb0_27;
                    bb0_29;
                  }
                  assign_while_1_latch;
                }
              }
            }
            assign_while_2_latch;
          }
        }
      }
    }
  }
}
