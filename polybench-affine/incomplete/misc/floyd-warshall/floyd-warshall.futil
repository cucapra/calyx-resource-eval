import "primitives/core.futil";
import "primitives/binary_operators.futil";
component main<"toplevel"=1>(@clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_7 = std_slice(32, 6);
    std_slice_6 = std_slice(32, 6);
    std_slice_5 = std_slice(32, 6);
    std_slice_4 = std_slice(32, 6);
    std_slice_3 = std_slice(32, 6);
    std_slice_2 = std_slice(32, 6);
    std_slice_1 = std_slice(32, 6);
    std_slice_0 = std_slice(32, 6);
    select_0_reg = std_reg(32);
    std_slt_3 = std_slt(32);
    std_add_3 = std_add(32);
    load_2_reg = std_reg(32);
    load_1_reg = std_reg(32);
    load_0_reg = std_reg(32);
    std_add_2 = std_add(32);
    std_slt_2 = std_slt(32);
    std_add_1 = std_add(32);
    std_slt_1 = std_slt(32);
    std_add_0 = std_add(32);
    std_slt_0 = std_slt(32);
    @external(1) mem_0 = std_mem_d2(32, 60, 60, 6, 6);
    while_2_arg0_reg = std_reg(32);
    while_1_arg0_reg = std_reg(32);
    while_0_arg0_reg = std_reg(32);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd60;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd60;
    }
    comb group bb0_4 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd60;
    }
    group bb0_6 {
      std_slice_7.in = while_1_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      mem_0.addr0 = std_slice_7.out;
      mem_0.addr1 = std_slice_6.out;
      load_0_reg.in = mem_0.read_data;
      load_0_reg.write_en = 1'd1;
      bb0_6[done] = load_0_reg.done;
    }
    group bb0_7 {
      std_slice_5.in = while_1_arg0_reg.out;
      std_slice_4.in = while_2_arg0_reg.out;
      mem_0.addr0 = std_slice_5.out;
      mem_0.addr1 = std_slice_4.out;
      load_1_reg.in = mem_0.read_data;
      load_1_reg.write_en = 1'd1;
      bb0_7[done] = load_1_reg.done;
    }
    group bb0_8 {
      std_slice_3.in = while_2_arg0_reg.out;
      std_slice_2.in = while_0_arg0_reg.out;
      mem_0.addr0 = std_slice_3.out;
      mem_0.addr1 = std_slice_2.out;
      load_2_reg.in = mem_0.read_data;
      load_2_reg.write_en = 1'd1;
      bb0_8[done] = load_2_reg.done;
    }
    group bb0_11 {
      select_0_reg.write_en = 1'd1;
      select_0_reg.in = std_slt_3.out ? load_0_reg.out;
      select_0_reg.in = !std_slt_3.out ? std_add_3.out;
      std_slt_3.left = load_0_reg.out;
      std_slt_3.right = std_add_3.out;
      std_add_3.left = load_1_reg.out;
      std_add_3.right = load_2_reg.out;
      bb0_11[done] = select_0_reg.done;
    }
    group bb0_12 {
      std_slice_1.in = while_1_arg0_reg.out;
      std_slice_0.in = while_0_arg0_reg.out;
      mem_0.addr0 = std_slice_1.out;
      mem_0.addr1 = std_slice_0.out;
      mem_0.write_data = select_0_reg.out;
      mem_0.write_en = 1'd1;
      bb0_12[done] = mem_0.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
  }
  control {
    seq {
      par {
        assign_while_2_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          par {
            assign_while_1_init_0;
          }
          while std_slt_1.out with bb0_2 {
            seq {
              par {
                assign_while_0_init_0;
              }
              while std_slt_2.out with bb0_4 {
                seq {
                  seq {
                    bb0_6;
                    bb0_7;
                    bb0_8;
                    bb0_11;
                    bb0_12;
                  }
                  assign_while_0_latch;
                }
              }
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}
